import { app, BrowserWindow, ipcMain, webContents, shell, dialog, session } from 'electron';
// eslint-disable-next-line @typescript-eslint/no-var-requires
const path = require('node:path')
import WhatsAppService from './api/whatsapp-service';
import { Login } from './types/login';
import { AuthenticationService } from './api/authentication-service';
import { JobService } from './api/job-service';
import { store } from './store/store';
import { Job } from './types/job';
import { IPC_CHANNELS } from './channels';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).


declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow : BrowserWindow;

let semaphore = false;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('pharmaconnex-whatsapp-bot', process.execPath, [path.resolve(process.argv[1])])
  }
} else {
  app.setAsDefaultProtocolClient('pharmaconnex-whatsapp-bot')
}

// processing deep links to get the cookie and to start new jobs
const processDeepLink = (deepLink:string) => {
   try {
    // Ensure it parses properly by adding fake base if needed
    const urlObj = new URL(deepLink);

    dialog.showErrorBox('Success!', `Here: ${deepLink}`);

    // Get query parameters
    const params: { [key: string]: string | null } = {};
    for (const [key, value] of urlObj.searchParams.entries()) {
      dialog.showErrorBox('Found param!', `key: ${key}, value: ${value}`);
      params[key] = value;
    }



    if (params.cookie) {
      if (!mainWindow){
        dialog.showErrorBox('Error!', `Main window is null`);

      }
      mainWindow.webContents.send('on-user-login', params.cookie);
    }

    return params;

  } catch (err) {
    dialog.showErrorBox('Error!', `Invalid deep link URL: ${deepLink}`);
    return {};
  }
}


const createWindow = (): void => {

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 780,
    width: 1020,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: true,
      sandbox: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  const s = new WhatsAppService(mainWindow);

  ipcMain.handle(IPC_CHANNELS.START_WHATSAPP_CLIENT, () => {

    const onQrUpdate = (qr:any) => {
      mainWindow.webContents.send(IPC_CHANNELS.ON_WHATSAPP_QR_UPDATE, qr);
    };

    s.intitialize(onQrUpdate);

  });

  ipcMain.handle(IPC_CHANNELS.HANDLE_ACCOUNT_LOGIN, async (event, login: Login) => {
      const service = new AuthenticationService();
      return await service.login(login);
  });

  ipcMain.handle(IPC_CHANNELS.TOGGLE_WHATSAPP_LOCAL_AUTH, () => {
      s.localAuth = !s.localAuth;
  });


  ipcMain.handle(IPC_CHANNELS.GET_JOBS, async (event) => {
      const service = new JobService();
      return await service.getJobs();
  });

  ipcMain.handle(IPC_CHANNELS.ENQUEUE_JOB, async (event, job: Job) => {
    if (store.store.queue.findIndex(x => x.id === job.id) < 0)
      store.store.queue.push(job);
  });

  ipcMain.handle(IPC_CHANNELS.DEQUEUE_JOB, async (event, job: Job) => {
    store.store.queue = store.store.queue.filter(x => x.id !== job.id);
  });

  const sleep = (ms:number) => new Promise(resolve => setTimeout(resolve, ms));

  setInterval( async () => {
    if (semaphore)
      return;

    semaphore = true;

    const jobService = new JobService();


    if (!s.connected){
      mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "danger", message: `User is not authenticated in WhatsApp, skipping job`});
      mainWindow.webContents.send(IPC_CHANNELS.ON_WHATSAPP_DISCONNECTED);
      semaphore = false;
      return;
    }
    
    if (store.store.queue.length > 0){

      const job = store.store.queue[0];
      mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "info", message: `Processing job with id ${job.id}`});


      const tasks = await jobService.getNextLocums(job.id, 1);
      const done: number[] = [];
      

      for (const task of tasks) {
        if (!task.ignore){
          if (!s.connected){
            mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "danger", message: `User is not authenticated in WhatsApp.`});
          } else {
            const result = await s.sendMessage(task.locumId, task.phoneNumber, task.message);
            sleep(1000);
            if (result){
              done.push(task.locumId);
            }
          }
        } else {
          done.push(task.locumId);
        }
      }

      const remaining = await jobService.markCompletedTasks(job.id, done);
      
      if (remaining <= 0){
        store.store.queue = store.store.queue.filter(x => x.id !== job.id);
        mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "success", message: `Job with id ${job.id} completed.`});
      } else {
        mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "success", message: `1 tasks completed, ${remaining} tasks remaining for job with id ${job.id}.`});
      }

      mainWindow.webContents.send(IPC_CHANNELS.ON_TASKS_COMPLETED, {jobId: job.id, remaining: remaining});
    } else {
      mainWindow.webContents.send(IPC_CHANNELS.ON_LOG, {datetime: new Date(), severity: "info", message: `There are no jobs for processing.`});
    }

    semaphore = false;

    // Do something useful like polling, logging, or file cleanup
  }, 5000);


  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.

const gotTheLock = app.requestSingleInstanceLock()

if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', (event, commandLine, workingDirectory) => {
    // Someone tried to run a second instance, we should focus our window.
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore()
      mainWindow.focus()
    }

    dialog.showErrorBox('Welcome Back', `You arrived from linux: ${commandLine.pop().slice(0, -1)}`)
  })

  // Create mainWindow, load the rest of the app, etc...
  app.whenReady().then(() => {
    createWindow()
  })

  app.on('open-url', (event, url) => {
    processDeepLink(url);
    dialog.showErrorBox('Welcome Back', `You arrived from macos: ${url}`);
  })
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
